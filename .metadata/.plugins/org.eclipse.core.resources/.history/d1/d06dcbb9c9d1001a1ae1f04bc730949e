import java.util.Scanner;


public class ProducerConsumerPatrons {
	
		public static int sleepTime;

		public static void main(String[] args) throws InterruptedException {
			
			Scanner scnr = new Scanner(System.in);
			Boolean flag = true;
			int numProducers = 0;
			int numConsumers = 0;
			
			
			System.out.println("Enter only a postive integer for each prompt as it appears below");
			
			while (flag) {
				try {	
			
					System.out.print("Enter the desired # of producer threads: ");
					String numProducersString = scnr.nextLine();
					numProducers = Integer.parseInt(numProducersString);
					System.out.print("Enter the desired # of consumer threads: ");
					String numConsumersString = scnr.nextLine();
					numConsumers = Integer.parseInt(numConsumersString);
					System.out.print("Enter the desired sleep time: ");
					String sleepTimeString = scnr.nextLine();
					sleepTime = Integer.parseInt(sleepTimeString);
					if ((numProducers > 0) && (numConsumers > 0)
							&& (sleepTime > 0)) {
					
						flag = false;
						System.out.println();
						
					}
					
					else {
						System.out.println("Enter only a postive integer for each prompt");
					}
					
				}
				catch (Exception e) {
					System.out.println("Enter only a postive integer for each prompt");
				}
				
				finally {
					System.out.println();
				}
			}
			
			
			
			
			
			
			

			ProducerConsumer itemBank = new ProducerConsumer();

			for (int i = 0; i < numProducers; i++) {
				producer itemProducer = new producer(itemBank);
				itemProducer.start();
				itemProducer.join();
			}
			
			for (int i = 0; i < numConsumers; i++) {
				consumer itemConsumer = new consumer(itemBank);
				itemConsumer.start();
				itemConsumer.join();
			}
		
			
			
			
			
			

			
			
			
			
			
			
			

			scnr.close();
		}
}
